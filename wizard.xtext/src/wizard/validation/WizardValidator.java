/*
 * generated by Xtext 2.21.0
 */
package wizard.validation;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.xtext.validation.Check;

import wizard.Boton;
import wizard.Campo;
import wizard.Casilla;
import wizard.Navegar;
import wizard.Pagina;
import wizard.Wizard;
import wizard.impl.CerrarImpl;
import wizard.impl.NavegarImpl;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class WizardValidator extends AbstractWizardValidator {
	
//	public static final String INVALID_NAME = "invalidName";
//
//	@Check
//	public void checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.getName().charAt(0))) {
//			warning("Name should start with a capital",
//					WizardPackage.Literals.GREETING__NAME,
//					INVALID_NAME);
//		}
//	}
		@Check
		public void checarPaginaInicial(Wizard wizard) {
			List<Pagina> paginas = wizard.getPaginas();
			int counter = 0;
			Pagina aux = null;
			
			for(Pagina pagina : paginas) {
				if(pagina.isInicial()) {
					aux = pagina;
					counter++;
				}
			}
			if(counter == 0) {
				error("El wizard debe contener una página inicial", wizard, null);
			} else if (counter > 1 && aux != null) {
				error("El wizard solo puede tener una página inicial", aux, null);
			}
		}
		
		@Check
		public void checarDestino(Pagina pagina) {
			List<Boton> botones = pagina.getBotones();
			
			for (Boton boton : botones) {
				if(boton.getClass() == NavegarImpl.class) {
					Navegar nav = (Navegar) boton;
					if(nav.getDestino() == pagina) {
						error("El destino de un botón de navegación no puede ser la misma página donde está el botón.", nav, null);
					}
				}
			}
			
		}
		
		@Check
		public void etiquetaUnica(Pagina pagina) {
			List<Boton> botones = pagina.getBotones();
			List<Casilla> casillas = pagina.getCasillas();
			List<Campo> campos = pagina.getCampos();
			List<String> etiquetas = new ArrayList<String>();
			
			for(Boton boton : botones) {
				if(!etiquetas.contains(boton.getEtiqueta())) {
					etiquetas.add(boton.getEtiqueta());
				} else {
					error("No puede haber dos elementos con la misma etiqueta en la misma página.", 
							boton, null);
				}
			}
			for(Casilla casilla : casillas) {
				if(!etiquetas.contains(casilla.getEtiqueta())) {
					etiquetas.add(casilla.getEtiqueta());
				} else {
					error("No puede haber dos elementos con la misma etiqueta en la misma página.", 
							casilla, null);
				}
			}
			for(Campo campo : campos) {
				if(!etiquetas.contains(campo.getEtiqueta())) {
					etiquetas.add(campo.getEtiqueta());
				} else {
					error("No puede haber dos elementos con la misma etiqueta en la misma página.", 
							campo, null);
				}
			}
			
			
			
		}
		
		@Check
		public void checarBotonesMostrar(Pagina pagina) {
			List<Boton> botones = pagina.getBotones();
			
			for(Boton boton : botones) {
				if(boton.getClass() == NavegarImpl.class || boton.getClass() == CerrarImpl.class)
					return;
			}
			
			error("Una página no puede contener únicamente botones que muestren mensajes.", 
					pagina, null);
		}
		
		@Check
		public void checarBotonesCerrar(Pagina pagina) {
			List<Boton> botones = pagina.getBotones();
			Boolean foundNav = false;
			Boolean foundClose = false;
			
			for (Boton boton : botones) {
				if(boton.getClass() == NavegarImpl.class) {
					foundNav = true;
				} else if (boton.getClass() == CerrarImpl.class) {
					foundClose = true;
				}
			}
			
			if(!foundNav && !foundClose) {
				error("Si una página no tiene botones de navegación, entonces debe tener al menos un botón para cerrar el wizard.", 
						pagina, null);
			}
		}
		
		
		@Check
		public void checarLongitudEtiquetaCampo(Campo campo) {
			if(campo.getEtiqueta().length() > 20) {
				error("La etiqueta puede tener como máximo 20 caracteres.", campo, null);
			}
		}
		@Check
		public void checarLongitudEtiquetaCasilla(Casilla casilla) {
			if(casilla.getEtiqueta().length() > 20) {
				error("La etiqueta puede tener como máximo 20 caracteres.", casilla, null);
			}
		}
		@Check
		public void checarLongitudEtiquetaCasilla(Boton boton) {
			if(boton.getEtiqueta().length() > 10) {
				error("La etiqueta puede tener como máximo 10 caracteres.", boton, null);
			}
		}
		
		@Check
		public void checarDestinoCasilla(Pagina pagina) {
			List<Casilla> casillas = pagina.getCasillas();
			
			for (Casilla casilla : casillas) {
				if(casilla.getNuevoDestino() == pagina) {
					error("El destino de un botón de navegación, a causa de una casilla, no puede ser la misma página donde está el botón.", casilla, null);
				}
			}
		}
	
}
