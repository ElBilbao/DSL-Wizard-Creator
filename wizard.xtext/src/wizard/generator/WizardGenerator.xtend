/*
 * generated by Xtext 2.21.0
 */
package wizard.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

import wizard.Pagina
import wizard.impl.NavegarImpl
import wizard.Navegar
import wizard.Cerrar
import wizard.Wizard
import wizard.impl.MostrarImpl
import wizard.Mostrar

/**
 * Generates code from your model files on save.
 * «»
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class WizardGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile("src/listeners/CloseWizardListener.java", compileClose())
		
		var paginas = resource.allContents.toIterable.filter(Pagina)
		fsa.generateFile("src/listeners/ChangePageListener.java", compileChange(paginas))
		
		paginas = resource.allContents.toIterable.filter(Pagina)
		fsa.generateFile("src/listeners/ShowMessageListener.java", compileShow(paginas))
		
		paginas = resource.allContents.toIterable.filter(Pagina)
		//var wizard = resource.allContents.toIterable.filter(Wizard)
		fsa.generateFile("src/wizard/Wizard.java", compileWizard(resource));
		
		fsa.generateFile("src/main/Main.java", compileMain());
	}
	
	// LISTENER FILES
	def compileClose() {
		'''
		package listeners;
		
		import java.awt.event.ActionEvent;
		import java.awt.event.ActionListener;
		import javax.swing.JFrame;
		
		public class CloseWizardListener implements ActionListener {
			private JFrame window;
			
			public CloseWizardListener(JFrame window) {
				this.window = window;
			}
			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				window.setVisible(false);
				window.dispose();
			}
		}
		'''
	}
	
	def compileChange(Iterable<Pagina> paginas) {
		var ti = 1;
		var ci = 1;
		'''
		package listeners;
		
		import java.awt.event.ActionEvent;
		import java.awt.event.ActionListener;
		
		import javax.swing.JOptionPane;
		
		import wizard.Wizard;
		
		public class ChangePageListener implements ActionListener {
			private Wizard window;
			
			public ChangePageListener(Wizard window) {
				this.window = window;
			}
			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				«var i = 1»
				«FOR pagina : paginas»
					«FOR boton : pagina.botones»
						«IF boton.class == typeof(NavegarImpl)»

							// button «i»
							if (arg0.getActionCommand().equals("button«i»")) {
								«FOR campo : pagina.getCampos()»
									«IF campo.isObligatorio()»
										if (window.text«ti»().equals("")) {
											JOptionPane.showMessageDialog(window, "El campo [«campo.etiqueta»] no puede estar vacio", "Campo Vacío", JOptionPane.ERROR_MESSAGE);
											return;
										}
									«ENDIF»
									«{ti++; ""}»
								«ENDFOR»
								
								«var flag = false»
								«FOR casilla : pagina.casillas»
									«IF casilla.nuevoDestino !== null»
										if (window.check«ci»()) {
											window.showPage(Wizard.«casilla.nuevoDestino.name.toUpperCase»);
											return;
										}
										«{flag = true; ""}»
									«ENDIF»
									«{ci++; ""}»
								«ENDFOR»
								«IF flag == true»
									else {
										window.showPage(Wizard.«botonANavegar(boton)»);
										return;
									}
								«ELSE»
									window.showPage(Wizard.«botonANavegar(boton)»);
								«ENDIF»
							}
						«ENDIF»
						«{i++; ""}»
					«ENDFOR»
				«ENDFOR»
			}
		}
		'''
	}
	
	def compileShow(Iterable<Pagina> paginas) {
		'''
		package listeners;
		
		import java.awt.event.ActionEvent;
		import java.awt.event.ActionListener;
		
		import javax.swing.JOptionPane;
		
		import wizard.Wizard;
		
		public class ShowMessageListener implements ActionListener {
			private Wizard window;
			
			public ShowMessageListener(Wizard window) {
				this.window = window;
			}
			
			@Override
			public void actionPerformed(ActionEvent arg0) {
				«var i = 1»
				«FOR pagina : paginas»
					«FOR boton : pagina.botones»
						«IF boton.class == typeof(MostrarImpl)»

							// button «i»
							if (arg0.getActionCommand().equals("button«i»")) {
								JOptionPane.showMessageDialog(window, "«botonAMostrar(boton)»", "Mensaje", JOptionPane.INFORMATION_MESSAGE);
								return;
							}
						«ENDIF»
						«{i++; ""}»
					«ENDFOR»
				«ENDFOR»
			}
		}
		'''
	}
	
	def dispatch botonANavegar(Navegar nav) {
		'''«nav.destino.name.toUpperCase»'''
	}
	
	def dispatch botonANavegar(Cerrar cer) {
		'''ERROOOOOOOOOOOOOOR'''
	}
	
	def dispatch botonAMostrar(Mostrar most) {
		'''«most.mensaje»'''
	}
	
	def dispatch botonAMostrar(Navegar nav) { 
		'''ERROOOOOOOOR'''
	}
	
	// WIZARD FILE
	def compileWizard(Resource resource) {
		var paginas = resource.allContents.toIterable.filter(Pagina);
		var wizard = resource.allContents.toIterable.filter(Wizard)
		var ti = 1;
		var ci = 1;
		var bi = 1;
		var li = 1;
		var x = 0;
		var y = 0;
		'''
		package wizard;
		
		import java.awt.BorderLayout;
		import java.awt.CardLayout;
		import java.awt.GridBagConstraints;
		import java.awt.GridBagLayout;
		
		import javax.swing.JButton;
		import javax.swing.JCheckBox;
		import javax.swing.JFrame;
		import javax.swing.JLabel;
		import javax.swing.JPanel;
		import javax.swing.JTextField;
		
		import listeners.ChangePageListener;
		import listeners.CloseWizardListener;
		import listeners.ShowMessageListener;
		
		public class Wizard extends JFrame {
			«FOR pagina : paginas»
				public static final String «pagina.name.toUpperCase» = "«pagina.name»";
			«ENDFOR»
			
			private JPanel wizard = new JPanel();
			private CardLayout layout = new CardLayout();
			«FOR pagina : resource.allContents.toIterable.filter(Pagina)»
				«FOR campo : pagina.campos»
					private JTextField text«ti++»;
				«ENDFOR»
			«ENDFOR»
			«FOR pagina : resource.allContents.toIterable.filter(Pagina)»
				«FOR casilla : pagina.casillas»
					private JCheckBox check«ci++»;
				«ENDFOR»
			«ENDFOR»
			«{ti = 1; ci = 1; ""}»
			
			«FOR pagina : resource.allContents.toIterable.filter(Pagina)»
				«FOR casilla : pagina.casillas»
					public boolean check«ci»() { return check«ci++».isSelected(); }
				«ENDFOR»
			«ENDFOR»
			«{ci = 1; ""}»
			«FOR pagina : resource.allContents.toIterable.filter(Pagina)»
				«FOR casilla : pagina.casillas»
					public void check«ci»(boolean v) { check«ci++».setSelected(v); }
				«ENDFOR»
			«ENDFOR»
			«{ci = 1; ""}»
			«FOR pagina : resource.allContents.toIterable.filter(Pagina)»
				«FOR campo : pagina.campos»
					public String text«ti»() { return text«ti++».getText(); }
				«ENDFOR»
			«ENDFOR»
			«{ti = 1; ""}»
			«FOR pagina : resource.allContents.toIterable.filter(Pagina)»
				«FOR campo : pagina.campos»
					public void text«ti»(String v) { text«ti++».setText(v); }
				«ENDFOR»
			«ENDFOR»
			«{ti = 1; ""}»
			
			public Wizard() {
				super("«wizard.get(0).titulo»");
				
				JPanel page, fields, buttons;
				GridBagConstraints c = new GridBagConstraints();		
				c.ipadx = 10;
				c.anchor = GridBagConstraints.WEST;
				
				// panel containing all pages
				wizard = new JPanel(layout);
				
				«FOR pagina : resource.allContents.toIterable.filter(Pagina)»
					// Page [«pagina.name.toUpperCase»] of wizard ......................................................
					«{x = 0; y = 0; ""}»
					// Fields
					fields = new JPanel(new GridBagLayout());
					«FOR campo : pagina.campos»
						JLabel label«li» = new JLabel("«campo.etiqueta»");
						c.gridx = «x++»;
						c.gridy = «y»;
						fields.add(label«li++», c);
						text«ti»  = new JTextField(10);
						c.gridx = «x++»;
						c.gridy = «y++»;		
						fields.add(text«ti++», c); «{x = 0; ""}»
					«ENDFOR»
					«{x = 0; y++; ""}»
					«FOR casilla : pagina.casillas»
						JLabel label«li» = new JLabel("«casilla.etiqueta»");
						c.gridx = «x++»;
						c.gridy = «y»;	
						fields.add(label«li++», c);
						check«ci» = new JCheckBox();
						«IF casilla.seleccionado»
							check«ci»(true);
						«ENDIF»
						c.gridx = «x++»;
						c.gridy = «y++»;	
						fields.add(check«ci++», c); «{x = 0; y++; ""}»
					«ENDFOR»
					
					// Buttons
					buttons = new JPanel();
					«FOR boton : pagina.botones»
						JButton button«bi» = new JButton("«boton.etiqueta»");
						«tipoDeBoton(boton, bi)»
						buttons.add(button«bi++»);
					«ENDFOR»
					
					// adding page to wizard
					page = new JPanel(new BorderLayout());
					page.add(fields,  BorderLayout.CENTER);
					page.add(buttons, BorderLayout.SOUTH);
					wizard.add(page, «pagina.name.toUpperCase»);
					
				«ENDFOR»
				
				
				// add panel to window
				getContentPane().add(wizard);
			}
			
			
			/**
			 * show wizard
			 */
			public void showWizard() {
				this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
				this.pack();
				this.setVisible(true);
			}
		
			/**
			 * show page of wizard
			 */
			public void showPage(String page) {
				layout.show(wizard, page);
			}
		}
		'''
	}
	
	def dispatch tipoDeBoton(Navegar navegar, int li) {
		'''
		button«li».setActionCommand("button«li»");
		button«li».addActionListener(new ChangePageListener(this));
		'''
	}
	
	def dispatch tipoDeBoton(Cerrar cerrar, int li) {
		'''
		button«li».addActionListener(new CloseWizardListener(this));
		'''
	}
	
	def dispatch tipoDeBoton(Mostrar mostrar, int li) {
		'''
		button«li».setActionCommand("button«li»");
		button«li».addActionListener(new ShowMessageListener(this));
		'''
	}
	
	
	// MAIN FILE
	def compileMain() {
		'''
		package main;
		
		import wizard.Wizard;
		
		public class Main {
			public static void main(String[] args) {
				Wizard wizard = new Wizard();
				wizard.showWizard();
			}
		}
		'''
	}
}
