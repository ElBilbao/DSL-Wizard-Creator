/*
 * generated by Xtext 2.21.0
 */
package wizard.scoping;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;

import wizard.Casilla;
import wizard.Navegar;
import wizard.Pagina;
import wizard.Wizard;
import wizard.impl.CasillaImpl;
import wizard.impl.NavegarImpl;
import wizard.impl.PaginaImpl;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class WizardScopeProvider extends AbstractWizardScopeProvider {
	
//	override getScope (EObject context, EReference reference) {   
//	      // si es la referencia que queremos restringir...
//	      if (context instanceof OrderLine && 
//	          reference == OrdersPackage.Literals.ORDER_LINE__ITEM) {    
//	        // obtener objeto raÃ­z (Ecommerce)
//	        var ecommerce = EcoreUtil2.getRootContainer(context) as Ecommerce
//	        // obtener items en stock (stock > 0)
//	        var items = new ArrayList()
//	        for (item : ecommerce.stock)
//	        if (item.stock > 0)
//	           items.add(item)
//	        // devolver items
//	        return Scopes.scopeFor(items)         
//	     } 
//	   }
	
	@Override
	public IScope getScope(EObject context, EReference reference) {
		
		// Navegar sugerir destino
	    if (context instanceof NavegarImpl && reference.getName() == "destino") {
	    	Wizard wizard = (Wizard) EcoreUtil2.getRootContainer(context);
	    	Pagina paginaPadre = EcoreUtil2.getContainerOfType(context, PaginaImpl.class);
	        List<PaginaImpl> paginas = EcoreUtil2.getAllContentsOfType(wizard, PaginaImpl.class);
	        
	        List<PaginaImpl> candidates = new ArrayList<PaginaImpl>();
	        
	        for(PaginaImpl pagina : paginas) {
	        	if(paginaPadre != pagina) {
	        		candidates.add(pagina);
	        	}
	        }
	        
	        return Scopes.scopeFor(candidates);
	    }
	    
	    // Navegar sugerir dependencias de casillas
	    else if (context instanceof NavegarImpl && reference.getName() == "casillas") {
	    	Navegar nav = (Navegar) context;
//	    	List<Casilla> casillasActuales = nav.getCasillas();
	    	Pagina paginaPadre = EcoreUtil2.getContainerOfType(context, PaginaImpl.class);
	        List<CasillaImpl> casillas = EcoreUtil2.getAllContentsOfType(paginaPadre, CasillaImpl.class);	        
	        
//	        // Gets reference error if used
//	        if(casillas.size() != casillasActuales.size()) {
//		        for(Casilla casilla : casillasActuales) {
//		        	casillas.remove(casilla);
//		        }
//	        } else {
//	        	return Scopes.scopeFor(new ArrayList<CasillaImpl>());
//	        }
	        
	        return Scopes.scopeFor(casillas);
	    }
	    
	    return super.getScope(context, reference);
	}
}
