/*
 * generated by Xtext 2.21.0
 */
package wizard.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import wizard.Campo;
import wizard.Casilla;
import wizard.Cerrar;
import wizard.Mostrar;
import wizard.Navegar;
import wizard.Pagina;
import wizard.Wizard;
import wizard.WizardPackage;
import wizard.services.WizardGrammarAccess;

@SuppressWarnings("all")
public class WizardSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private WizardGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == WizardPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case WizardPackage.CAMPO:
				sequence_Campo(context, (Campo) semanticObject); 
				return; 
			case WizardPackage.CASILLA:
				sequence_Casilla(context, (Casilla) semanticObject); 
				return; 
			case WizardPackage.CERRAR:
				sequence_Cerrar(context, (Cerrar) semanticObject); 
				return; 
			case WizardPackage.MOSTRAR:
				sequence_Mostrar(context, (Mostrar) semanticObject); 
				return; 
			case WizardPackage.NAVEGAR:
				sequence_Navegar(context, (Navegar) semanticObject); 
				return; 
			case WizardPackage.PAGINA:
				sequence_Pagina(context, (Pagina) semanticObject); 
				return; 
			case WizardPackage.WIZARD:
				sequence_Wizard(context, (Wizard) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Campo returns Campo
	 *
	 * Constraint:
	 *     (obligatorio?='obligatorio'? etiqueta=EString)
	 */
	protected void sequence_Campo(ISerializationContext context, Campo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Casilla returns Casilla
	 *
	 * Constraint:
	 *     (seleccionado?='seleccionada'? name=EString etiqueta=EString nuevoDestino=[Pagina|EString]?)
	 */
	protected void sequence_Casilla(ISerializationContext context, Casilla semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Boton returns Cerrar
	 *     Cerrar returns Cerrar
	 *
	 * Constraint:
	 *     etiqueta=EString
	 */
	protected void sequence_Cerrar(ISerializationContext context, Cerrar semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WizardPackage.Literals.BOTON__ETIQUETA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WizardPackage.Literals.BOTON__ETIQUETA));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCerrarAccess().getEtiquetaEStringParserRuleCall_1_0(), semanticObject.getEtiqueta());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Boton returns Mostrar
	 *     Mostrar returns Mostrar
	 *
	 * Constraint:
	 *     (etiqueta=EString mensaje=EString)
	 */
	protected void sequence_Mostrar(ISerializationContext context, Mostrar semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WizardPackage.Literals.BOTON__ETIQUETA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WizardPackage.Literals.BOTON__ETIQUETA));
			if (transientValues.isValueTransient(semanticObject, WizardPackage.Literals.MOSTRAR__MENSAJE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WizardPackage.Literals.MOSTRAR__MENSAJE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMostrarAccess().getEtiquetaEStringParserRuleCall_1_0(), semanticObject.getEtiqueta());
		feeder.accept(grammarAccess.getMostrarAccess().getMensajeEStringParserRuleCall_3_0(), semanticObject.getMensaje());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Boton returns Navegar
	 *     Navegar returns Navegar
	 *
	 * Constraint:
	 *     (etiqueta=EString destino=[Pagina|EString] (casillas+=[Casilla|EString] casillas+=[Casilla|EString]*)?)
	 */
	protected void sequence_Navegar(ISerializationContext context, Navegar semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Pagina returns Pagina
	 *
	 * Constraint:
	 *     (
	 *         ((inicial?='inicial' name=EString) | name=EString) 
	 *         (campos+=Campo campos+=Campo*)? 
	 *         (casillas+=Casilla casillas+=Casilla*)? 
	 *         botones+=Boton 
	 *         botones+=Boton*
	 *     )
	 */
	protected void sequence_Pagina(ISerializationContext context, Pagina semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Wizard returns Wizard
	 *
	 * Constraint:
	 *     (titulo=EString paginas+=Pagina paginas+=Pagina*)
	 */
	protected void sequence_Wizard(ISerializationContext context, Wizard semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
