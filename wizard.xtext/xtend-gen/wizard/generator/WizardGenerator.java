/**
 * generated by Xtext 2.21.0
 */
package wizard.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import wizard.Boton;
import wizard.Campo;
import wizard.Casilla;
import wizard.Cerrar;
import wizard.Mostrar;
import wizard.Navegar;
import wizard.Pagina;
import wizard.Wizard;
import wizard.impl.MostrarImpl;
import wizard.impl.NavegarImpl;

/**
 * Generates code from your model files on save.
 * «»
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class WizardGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    fsa.generateFile("src/listeners/CloseWizardListener.java", this.compileClose());
    Iterable<Pagina> paginas = Iterables.<Pagina>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Pagina.class);
    fsa.generateFile("src/listeners/ChangePageListener.java", this.compileChange(paginas));
    paginas = Iterables.<Pagina>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Pagina.class);
    fsa.generateFile("src/listeners/ShowMessageListener.java", this.compileShow(paginas));
    paginas = Iterables.<Pagina>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Pagina.class);
    fsa.generateFile("src/wizard/Wizard.java", this.compileWizard(resource));
    fsa.generateFile("src/main/Main.java", this.compileMain());
  }
  
  public CharSequence compileClose() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package listeners;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.awt.event.ActionEvent;");
    _builder.newLine();
    _builder.append("import java.awt.event.ActionListener;");
    _builder.newLine();
    _builder.append("import javax.swing.JFrame;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class CloseWizardListener implements ActionListener {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private JFrame window;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public CloseWizardListener(JFrame window) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.window = window;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void actionPerformed(ActionEvent arg0) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("window.setVisible(false);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("window.dispose();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compileChange(final Iterable<Pagina> paginas) {
    CharSequence _xblockexpression = null;
    {
      int ti = 1;
      int ci = 1;
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package listeners;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("import java.awt.event.ActionEvent;");
      _builder.newLine();
      _builder.append("import java.awt.event.ActionListener;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("import javax.swing.JOptionPane;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("import wizard.Wizard;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("public class ChangePageListener implements ActionListener {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("private Wizard window;");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public ChangePageListener(Wizard window) {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("this.window = window;");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("@Override");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public void actionPerformed(ActionEvent arg0) {");
      _builder.newLine();
      _builder.append("\t\t");
      int i = 1;
      _builder.newLineIfNotEmpty();
      {
        for(final Pagina pagina : paginas) {
          {
            EList<Boton> _botones = pagina.getBotones();
            for(final Boton boton : _botones) {
              {
                Class<? extends Boton> _class = boton.getClass();
                boolean _equals = Objects.equal(_class, NavegarImpl.class);
                if (_equals) {
                  _builder.newLine();
                  _builder.append("\t\t");
                  _builder.append("// button ");
                  _builder.append(i, "\t\t");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t");
                  _builder.append("if (arg0.getActionCommand().equals(\"button");
                  _builder.append(i, "\t\t");
                  _builder.append("\")) {");
                  _builder.newLineIfNotEmpty();
                  {
                    EList<Campo> _campos = pagina.getCampos();
                    for(final Campo campo : _campos) {
                      {
                        boolean _isObligatorio = campo.isObligatorio();
                        if (_isObligatorio) {
                          _builder.append("\t\t");
                          _builder.append("\t");
                          _builder.append("if (window.text");
                          _builder.append(ti, "\t\t\t");
                          _builder.append("().equals(\"\")) {");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t\t");
                          _builder.append("\t");
                          _builder.append("\t");
                          _builder.append("JOptionPane.showMessageDialog(window, \"El campo [");
                          String _etiqueta = campo.getEtiqueta();
                          _builder.append(_etiqueta, "\t\t\t\t");
                          _builder.append("] no puede estar vacio\", \"Campo Vacío\", JOptionPane.ERROR_MESSAGE);");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t\t");
                          _builder.append("\t");
                          _builder.append("\t");
                          _builder.append("return;");
                          _builder.newLine();
                          _builder.append("\t\t");
                          _builder.append("\t");
                          _builder.append("}");
                          _builder.newLine();
                        }
                      }
                      _builder.append("\t\t");
                      _builder.append("\t");
                      String _xblockexpression_1 = null;
                      {
                        ti++;
                        _xblockexpression_1 = "";
                      }
                      _builder.append(_xblockexpression_1, "\t\t\t");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  _builder.append("\t\t");
                  _builder.append("\t");
                  _builder.newLine();
                  _builder.append("\t\t");
                  _builder.append("\t");
                  boolean flag = false;
                  _builder.newLineIfNotEmpty();
                  {
                    EList<Casilla> _casillas = pagina.getCasillas();
                    for(final Casilla casilla : _casillas) {
                      {
                        Pagina _nuevoDestino = casilla.getNuevoDestino();
                        boolean _tripleNotEquals = (_nuevoDestino != null);
                        if (_tripleNotEquals) {
                          _builder.append("\t\t");
                          _builder.append("\t");
                          _builder.append("if (window.check");
                          _builder.append(ci, "\t\t\t");
                          _builder.append("()) {");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t\t");
                          _builder.append("\t");
                          _builder.append("\t");
                          _builder.append("window.showPage(Wizard.");
                          String _upperCase = casilla.getNuevoDestino().getName().toUpperCase();
                          _builder.append(_upperCase, "\t\t\t\t");
                          _builder.append(");");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t\t");
                          _builder.append("\t");
                          _builder.append("\t");
                          _builder.append("return;");
                          _builder.newLine();
                          _builder.append("\t\t");
                          _builder.append("\t");
                          _builder.append("}");
                          _builder.newLine();
                          _builder.append("\t\t");
                          _builder.append("\t");
                          String _xblockexpression_2 = null;
                          {
                            flag = true;
                            _xblockexpression_2 = "";
                          }
                          _builder.append(_xblockexpression_2, "\t\t\t");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                      _builder.append("\t\t");
                      _builder.append("\t");
                      String _xblockexpression_3 = null;
                      {
                        ci++;
                        _xblockexpression_3 = "";
                      }
                      _builder.append(_xblockexpression_3, "\t\t\t");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  {
                    if ((flag == true)) {
                      _builder.append("\t\t");
                      _builder.append("\t");
                      _builder.append("else {");
                      _builder.newLine();
                      _builder.append("\t\t");
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("window.showPage(Wizard.");
                      CharSequence _botonANavegar = this.botonANavegar(boton);
                      _builder.append(_botonANavegar, "\t\t\t\t");
                      _builder.append(");");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t");
                      _builder.append("\t");
                      _builder.append("\t");
                      _builder.append("return;");
                      _builder.newLine();
                      _builder.append("\t\t");
                      _builder.append("\t");
                      _builder.append("}");
                      _builder.newLine();
                    } else {
                      _builder.append("\t\t");
                      _builder.append("\t");
                      _builder.append("window.showPage(Wizard.");
                      CharSequence _botonANavegar_1 = this.botonANavegar(boton);
                      _builder.append(_botonANavegar_1, "\t\t\t");
                      _builder.append(");");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  _builder.append("\t\t");
                  _builder.append("}");
                  _builder.newLine();
                }
              }
              _builder.append("\t\t");
              String _xblockexpression_4 = null;
              {
                i++;
                _xblockexpression_4 = "";
              }
              _builder.append(_xblockexpression_4, "\t\t");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public CharSequence compileShow(final Iterable<Pagina> paginas) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package listeners;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.awt.event.ActionEvent;");
    _builder.newLine();
    _builder.append("import java.awt.event.ActionListener;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.swing.JOptionPane;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import wizard.Wizard;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ShowMessageListener implements ActionListener {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Wizard window;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ShowMessageListener(Wizard window) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.window = window;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void actionPerformed(ActionEvent arg0) {");
    _builder.newLine();
    _builder.append("\t\t");
    int i = 1;
    _builder.newLineIfNotEmpty();
    {
      for(final Pagina pagina : paginas) {
        {
          EList<Boton> _botones = pagina.getBotones();
          for(final Boton boton : _botones) {
            {
              Class<? extends Boton> _class = boton.getClass();
              boolean _equals = Objects.equal(_class, MostrarImpl.class);
              if (_equals) {
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("// button ");
                _builder.append(i, "\t\t");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("if (arg0.getActionCommand().equals(\"button");
                _builder.append(i, "\t\t");
                _builder.append("\")) {");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("JOptionPane.showMessageDialog(window, \"");
                CharSequence _botonAMostrar = this.botonAMostrar(boton);
                _builder.append(_botonAMostrar, "\t\t\t");
                _builder.append("\", \"Mensaje\", JOptionPane.INFORMATION_MESSAGE);");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("\t");
                _builder.append("return;");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("}");
                _builder.newLine();
              }
            }
            _builder.append("\t\t");
            String _xblockexpression = null;
            {
              i++;
              _xblockexpression = "";
            }
            _builder.append(_xblockexpression, "\t\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _botonANavegar(final Navegar nav) {
    StringConcatenation _builder = new StringConcatenation();
    String _upperCase = nav.getDestino().getName().toUpperCase();
    _builder.append(_upperCase);
    return _builder;
  }
  
  protected CharSequence _botonANavegar(final Cerrar cer) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("ERROOOOOOOOOOOOOOR");
    return _builder;
  }
  
  protected CharSequence _botonAMostrar(final Mostrar most) {
    StringConcatenation _builder = new StringConcatenation();
    String _mensaje = most.getMensaje();
    _builder.append(_mensaje);
    return _builder;
  }
  
  protected CharSequence _botonAMostrar(final Navegar nav) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("ERROOOOOOOOR");
    return _builder;
  }
  
  public CharSequence compileWizard(final Resource resource) {
    CharSequence _xblockexpression = null;
    {
      Iterable<Pagina> paginas = Iterables.<Pagina>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Pagina.class);
      Iterable<Wizard> wizard = Iterables.<Wizard>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Wizard.class);
      int ti = 1;
      int ci = 1;
      int bi = 1;
      int li = 1;
      int x = 0;
      int y = 0;
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package wizard;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("import java.awt.BorderLayout;");
      _builder.newLine();
      _builder.append("import java.awt.CardLayout;");
      _builder.newLine();
      _builder.append("import java.awt.GridBagConstraints;");
      _builder.newLine();
      _builder.append("import java.awt.GridBagLayout;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("import javax.swing.JButton;");
      _builder.newLine();
      _builder.append("import javax.swing.JCheckBox;");
      _builder.newLine();
      _builder.append("import javax.swing.JFrame;");
      _builder.newLine();
      _builder.append("import javax.swing.JLabel;");
      _builder.newLine();
      _builder.append("import javax.swing.JPanel;");
      _builder.newLine();
      _builder.append("import javax.swing.JTextField;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("import listeners.ChangePageListener;");
      _builder.newLine();
      _builder.append("import listeners.CloseWizardListener;");
      _builder.newLine();
      _builder.append("import listeners.ShowMessageListener;");
      _builder.newLine();
      _builder.newLine();
      _builder.append("public class Wizard extends JFrame {");
      _builder.newLine();
      {
        for(final Pagina pagina : paginas) {
          _builder.append("\t");
          _builder.append("public static final String ");
          String _upperCase = pagina.getName().toUpperCase();
          _builder.append(_upperCase, "\t");
          _builder.append(" = \"");
          String _name = pagina.getName();
          _builder.append(_name, "\t");
          _builder.append("\";");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("private JPanel wizard = new JPanel();");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("private CardLayout layout = new CardLayout();");
      _builder.newLine();
      {
        Iterable<Pagina> _filter = Iterables.<Pagina>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Pagina.class);
        for(final Pagina pagina_1 : _filter) {
          {
            EList<Campo> _campos = pagina_1.getCampos();
            for(final Campo campo : _campos) {
              _builder.append("\t");
              _builder.append("private JTextField text");
              int _plusPlus = ti++;
              _builder.append(_plusPlus, "\t");
              _builder.append(";");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
      {
        Iterable<Pagina> _filter_1 = Iterables.<Pagina>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Pagina.class);
        for(final Pagina pagina_2 : _filter_1) {
          {
            EList<Casilla> _casillas = pagina_2.getCasillas();
            for(final Casilla casilla : _casillas) {
              _builder.append("\t");
              _builder.append("private JCheckBox check");
              int _plusPlus_1 = ci++;
              _builder.append(_plusPlus_1, "\t");
              _builder.append(";");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
      _builder.append("\t");
      String _xblockexpression_1 = null;
      {
        ti = 1;
        ci = 1;
        _xblockexpression_1 = "";
      }
      _builder.append(_xblockexpression_1, "\t");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.newLine();
      {
        Iterable<Pagina> _filter_2 = Iterables.<Pagina>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Pagina.class);
        for(final Pagina pagina_3 : _filter_2) {
          {
            EList<Casilla> _casillas_1 = pagina_3.getCasillas();
            for(final Casilla casilla_1 : _casillas_1) {
              _builder.append("\t");
              _builder.append("public boolean check");
              _builder.append(ci, "\t");
              _builder.append("() { return check");
              int _plusPlus_2 = ci++;
              _builder.append(_plusPlus_2, "\t");
              _builder.append(".isSelected(); }");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
      _builder.append("\t");
      String _xblockexpression_2 = null;
      {
        ci = 1;
        _xblockexpression_2 = "";
      }
      _builder.append(_xblockexpression_2, "\t");
      _builder.newLineIfNotEmpty();
      {
        Iterable<Pagina> _filter_3 = Iterables.<Pagina>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Pagina.class);
        for(final Pagina pagina_4 : _filter_3) {
          {
            EList<Casilla> _casillas_2 = pagina_4.getCasillas();
            for(final Casilla casilla_2 : _casillas_2) {
              _builder.append("\t");
              _builder.append("public void check");
              _builder.append(ci, "\t");
              _builder.append("(boolean v) { check");
              int _plusPlus_3 = ci++;
              _builder.append(_plusPlus_3, "\t");
              _builder.append(".setSelected(v); }");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
      _builder.append("\t");
      String _xblockexpression_3 = null;
      {
        ci = 1;
        _xblockexpression_3 = "";
      }
      _builder.append(_xblockexpression_3, "\t");
      _builder.newLineIfNotEmpty();
      {
        Iterable<Pagina> _filter_4 = Iterables.<Pagina>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Pagina.class);
        for(final Pagina pagina_5 : _filter_4) {
          {
            EList<Campo> _campos_1 = pagina_5.getCampos();
            for(final Campo campo_1 : _campos_1) {
              _builder.append("\t");
              _builder.append("public String text");
              _builder.append(ti, "\t");
              _builder.append("() { return text");
              int _plusPlus_4 = ti++;
              _builder.append(_plusPlus_4, "\t");
              _builder.append(".getText(); }");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
      _builder.append("\t");
      String _xblockexpression_4 = null;
      {
        ti = 1;
        _xblockexpression_4 = "";
      }
      _builder.append(_xblockexpression_4, "\t");
      _builder.newLineIfNotEmpty();
      {
        Iterable<Pagina> _filter_5 = Iterables.<Pagina>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Pagina.class);
        for(final Pagina pagina_6 : _filter_5) {
          {
            EList<Campo> _campos_2 = pagina_6.getCampos();
            for(final Campo campo_2 : _campos_2) {
              _builder.append("\t");
              _builder.append("public void text");
              _builder.append(ti, "\t");
              _builder.append("(String v) { text");
              int _plusPlus_5 = ti++;
              _builder.append(_plusPlus_5, "\t");
              _builder.append(".setText(v); }");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
      _builder.append("\t");
      String _xblockexpression_5 = null;
      {
        ti = 1;
        _xblockexpression_5 = "";
      }
      _builder.append(_xblockexpression_5, "\t");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public Wizard() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("super(\"");
      final Iterable<Wizard> _converted_wizard = (Iterable<Wizard>)wizard;
      String _titulo = (((Wizard[])Conversions.unwrapArray(_converted_wizard, Wizard.class))[0]).getTitulo();
      _builder.append(_titulo, "\t\t");
      _builder.append("\");");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("JPanel page, fields, buttons;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("GridBagConstraints c = new GridBagConstraints();\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("c.ipadx = 10;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("c.anchor = GridBagConstraints.WEST;");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("// panel containing all pages");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("wizard = new JPanel(layout);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      {
        Iterable<Pagina> _filter_6 = Iterables.<Pagina>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Pagina.class);
        for(final Pagina pagina_7 : _filter_6) {
          _builder.append("\t\t");
          _builder.append("// Page [");
          String _upperCase_1 = pagina_7.getName().toUpperCase();
          _builder.append(_upperCase_1, "\t\t");
          _builder.append("] of wizard ......................................................");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          String _xblockexpression_6 = null;
          {
            x = 0;
            y = 0;
            _xblockexpression_6 = "";
          }
          _builder.append(_xblockexpression_6, "\t\t");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("// Fields");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("fields = new JPanel(new GridBagLayout());");
          _builder.newLine();
          {
            EList<Campo> _campos_3 = pagina_7.getCampos();
            for(final Campo campo_3 : _campos_3) {
              _builder.append("\t\t");
              _builder.append("JLabel label");
              _builder.append(li, "\t\t");
              _builder.append(" = new JLabel(\"");
              String _etiqueta = campo_3.getEtiqueta();
              _builder.append(_etiqueta, "\t\t");
              _builder.append("\");");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              _builder.append("c.gridx = ");
              int _plusPlus_6 = x++;
              _builder.append(_plusPlus_6, "\t\t");
              _builder.append(";");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              _builder.append("c.gridy = ");
              _builder.append(y, "\t\t");
              _builder.append(";");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              _builder.append("fields.add(label");
              int _plusPlus_7 = li++;
              _builder.append(_plusPlus_7, "\t\t");
              _builder.append(", c);");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              _builder.append("text");
              _builder.append(ti, "\t\t");
              _builder.append("  = new JTextField(10);");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              _builder.append("c.gridx = ");
              int _plusPlus_8 = x++;
              _builder.append(_plusPlus_8, "\t\t");
              _builder.append(";");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              _builder.append("c.gridy = ");
              int _plusPlus_9 = y++;
              _builder.append(_plusPlus_9, "\t\t");
              _builder.append(";\t\t");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              _builder.append("fields.add(text");
              int _plusPlus_10 = ti++;
              _builder.append(_plusPlus_10, "\t\t");
              _builder.append(", c); ");
              String _xblockexpression_7 = null;
              {
                x = 0;
                _xblockexpression_7 = "";
              }
              _builder.append(_xblockexpression_7, "\t\t");
              _builder.newLineIfNotEmpty();
            }
          }
          _builder.append("\t\t");
          String _xblockexpression_8 = null;
          {
            x = 0;
            y++;
            _xblockexpression_8 = "";
          }
          _builder.append(_xblockexpression_8, "\t\t");
          _builder.newLineIfNotEmpty();
          {
            EList<Casilla> _casillas_3 = pagina_7.getCasillas();
            for(final Casilla casilla_3 : _casillas_3) {
              _builder.append("\t\t");
              _builder.append("JLabel label");
              _builder.append(li, "\t\t");
              _builder.append(" = new JLabel(\"");
              String _etiqueta_1 = casilla_3.getEtiqueta();
              _builder.append(_etiqueta_1, "\t\t");
              _builder.append("\");");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              _builder.append("c.gridx = ");
              int _plusPlus_11 = x++;
              _builder.append(_plusPlus_11, "\t\t");
              _builder.append(";");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              _builder.append("c.gridy = ");
              _builder.append(y, "\t\t");
              _builder.append(";\t");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              _builder.append("fields.add(label");
              int _plusPlus_12 = li++;
              _builder.append(_plusPlus_12, "\t\t");
              _builder.append(", c);");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              _builder.append("check");
              _builder.append(ci, "\t\t");
              _builder.append(" = new JCheckBox();");
              _builder.newLineIfNotEmpty();
              {
                boolean _isSeleccionado = casilla_3.isSeleccionado();
                if (_isSeleccionado) {
                  _builder.append("\t\t");
                  _builder.append("check");
                  _builder.append(ci, "\t\t");
                  _builder.append("(true);");
                  _builder.newLineIfNotEmpty();
                }
              }
              _builder.append("\t\t");
              _builder.append("c.gridx = ");
              int _plusPlus_13 = x++;
              _builder.append(_plusPlus_13, "\t\t");
              _builder.append(";");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              _builder.append("c.gridy = ");
              int _plusPlus_14 = y++;
              _builder.append(_plusPlus_14, "\t\t");
              _builder.append(";\t");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              _builder.append("fields.add(check");
              int _plusPlus_15 = ci++;
              _builder.append(_plusPlus_15, "\t\t");
              _builder.append(", c); ");
              String _xblockexpression_9 = null;
              {
                x = 0;
                y++;
                _xblockexpression_9 = "";
              }
              _builder.append(_xblockexpression_9, "\t\t");
              _builder.newLineIfNotEmpty();
            }
          }
          _builder.append("\t\t");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("// Buttons");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("buttons = new JPanel();");
          _builder.newLine();
          {
            EList<Boton> _botones = pagina_7.getBotones();
            for(final Boton boton : _botones) {
              _builder.append("\t\t");
              _builder.append("JButton button");
              _builder.append(bi, "\t\t");
              _builder.append(" = new JButton(\"");
              String _etiqueta_2 = boton.getEtiqueta();
              _builder.append(_etiqueta_2, "\t\t");
              _builder.append("\");");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              CharSequence _tipoDeBoton = this.tipoDeBoton(boton, bi);
              _builder.append(_tipoDeBoton, "\t\t");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t");
              _builder.append("buttons.add(button");
              int _plusPlus_16 = bi++;
              _builder.append(_plusPlus_16, "\t\t");
              _builder.append(");");
              _builder.newLineIfNotEmpty();
            }
          }
          _builder.append("\t\t");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("// adding page to wizard");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("page = new JPanel(new BorderLayout());");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("page.add(fields,  BorderLayout.CENTER);");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("page.add(buttons, BorderLayout.SOUTH);");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("wizard.add(page, ");
          String _upperCase_2 = pagina_7.getName().toUpperCase();
          _builder.append(_upperCase_2, "\t\t");
          _builder.append(");");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.newLine();
        }
      }
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("// add panel to window");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("getContentPane().add(wizard);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* show wizard");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public void showWizard() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("this.pack();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("this.setVisible(true);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/**");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("* show page of wizard");
      _builder.newLine();
      _builder.append("\t ");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public void showPage(String page) {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("layout.show(wizard, page);");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  protected CharSequence _tipoDeBoton(final Navegar navegar, final int li) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("button");
    _builder.append(li);
    _builder.append(".setActionCommand(\"button");
    _builder.append(li);
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("button");
    _builder.append(li);
    _builder.append(".addActionListener(new ChangePageListener(this));");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _tipoDeBoton(final Cerrar cerrar, final int li) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("button");
    _builder.append(li);
    _builder.append(".addActionListener(new CloseWizardListener(this));");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _tipoDeBoton(final Mostrar mostrar, final int li) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("button");
    _builder.append(li);
    _builder.append(".setActionCommand(\"button");
    _builder.append(li);
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("button");
    _builder.append(li);
    _builder.append(".addActionListener(new ShowMessageListener(this));");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compileMain() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package main;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import wizard.Wizard;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Main {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Wizard wizard = new Wizard();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("wizard.showWizard();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence botonANavegar(final Boton cer) {
    if (cer instanceof Cerrar) {
      return _botonANavegar((Cerrar)cer);
    } else if (cer instanceof Navegar) {
      return _botonANavegar((Navegar)cer);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(cer).toString());
    }
  }
  
  public CharSequence botonAMostrar(final Boton most) {
    if (most instanceof Mostrar) {
      return _botonAMostrar((Mostrar)most);
    } else if (most instanceof Navegar) {
      return _botonAMostrar((Navegar)most);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(most).toString());
    }
  }
  
  public CharSequence tipoDeBoton(final Boton cerrar, final int li) {
    if (cerrar instanceof Cerrar) {
      return _tipoDeBoton((Cerrar)cerrar, li);
    } else if (cerrar instanceof Mostrar) {
      return _tipoDeBoton((Mostrar)cerrar, li);
    } else if (cerrar instanceof Navegar) {
      return _tipoDeBoton((Navegar)cerrar, li);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(cerrar, li).toString());
    }
  }
}
